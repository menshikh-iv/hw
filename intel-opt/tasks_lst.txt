Задачки по оптимизации производительности
					@ --- 1 ---
					@ (3_Vektorizatsia.pdf)
					@ Написать программу вычисления скалярного произведения векторов
					@ - Скомпилировать программу без оптимизации и замерить время выполнения
					@ - Скомпилировать программу с оптимизацией -O2 и включенным отчетом о векторизации, замерить время выполнения
					@ - Сравнить производительность векторизации для типов данных float и double

					@ --- 2 ---
					@ (3_Vektorizatsia.pdf)
					@ Какой тип данных будет векторизован?
					@ ◦ Массив структур
					@ ◦ Структура массивов

					@ - Написать программу, реализующую оба типа данных
					@ - Объяснить результаты


--- 3 ---
(4_Skalyarnye_i_tsiklicheskie_optimizatsii.pdf)

«loop_unswitching»
- Измерить время: Od, O3
- Посмотреть отчет об оптимизациях

«loop_interchange»
- Измерить время: Od, -O3
- Посмотреть отчет об оптимизациях


--- 4 ---
(4_Skalyarnye_i_tsiklicheskie_optimizatsii.pdf)

«loop_optimization»
Оптимизировать программу вручную: Используя -Od, постараться приблизить производительность к -O3
Файлы компилировать по отдельности!



--- 5 ---
(4_Avtomaticheskoe_rasparallelivanie.pdf)

Написать программу по перемножению матриц. Запустить программу с автоматическим распараллеливанием и без него, оценить разницу
Какие циклы удалось распараллелить? Как изменить порядок распараллеливания? “Правильно” ли компилятор распараллелил программу?

					@ --- 6 ---
					@ (4_Avtomaticheskoe_rasparallelivanie.pdf)
					@ Написать программу, определяющую количество всех простых числе в диапазоне от 0 до N
					@ Запустить программу с автоматическим распараллеливанием и без него, оценить разницу и объяснить результат


					@ --- 7 ---
					@ (5_Vvedenie_v_OpenMP.pdf)
					@ Ускорить выполнение цикла for в программе, вычисляющей
					@ покоординатную функцию от элементов массива a: a[i]=F(a[i]);

??? --- 8 ---
??? (5_Vvedenie_v_OpenMP.pdf)
??? Элементы массива a инициализируются 0, массива b[0]...b[n-1] –
??? случайными числами от 0 до n-1. Распараллелить цикл
???	for (i=0; i<n; i++) a[b[i]]++;

					@ --- 9 ---
					@ (5_Vvedenie_v_OpenMP.pdf)
					@ 
					@ Распараллелить цикл вычисления суммы
					@	for (i=0; i<n; i++) sum+=F(i);


!!! Нужно другое распараллеливание
@ --- 10 ---
@ (5_Vvedenie_v_OpenMP.pdf)
@
@ Написать программу, вычисляющую количество простых чисел в диапазоне от 2 до N. Ускорить ее с помощью OpenMP.


--- 11 ---
(6_1_Mezhprotsedurnye_optimizatsii.pdf)
- Скомпилировать программу с межпроцедурными оптимизациями и без
- Проверить, остался ли вызов сторонней функции.
- Для генерации ассемблерного кода использовать ключи -S, -ipo-S


--- 12 ---
(6_1_Mezhprotsedurnye_optimizatsii.pdf)
- Скомпилировать программу с межпроцедурными оптимизациями и без
них.
- В обоих случаях использовать ключи -parallel и -std=c99
- Проверить, произошло ли автоматическое распараллеливание, и
объяснить полученный результат.

--- 13 ---
(7_MKL.pdf)

Сравнить производительность операции перемножения матриц для
одинарной и двойной точности
- Скомпилированной с помощью опций -O0, -O2, -O3
- Распараллеленной с помощью OpenMP
- Выполненной с помощью Intel MKL



--- 14 --- 
ПРОЕКТ (Оптимизация MinHash)
